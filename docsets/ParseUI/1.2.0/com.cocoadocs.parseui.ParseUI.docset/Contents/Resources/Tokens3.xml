<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PFLogInView.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PFLogInView</TokenIdentifier>
			<Abstract type="html">The PFLogInView class provides a standard log in interface for authenticating a PFUser.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
            
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/initWithFields:</TokenIdentifier>
			<Abstract type="html">Initializes the view with the specified log in elements.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/c/tdef/PFLogInFields</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (instancetype)initWithFields:(PFLogInFields)fields</Declaration>
			<Parameters>
				<Parameter>
					<Name>fields</Name>
					<Abstract type="html">A bitmask specifying the log in elements which are enabled in the view</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized PFLogInView object or nil if the object couldn&apos;t be created.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithFields:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/setPresentingViewController:</TokenIdentifier>
			<Abstract type="html">The view controller that will present this view.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, weak) UIViewController *presentingViewController</Declaration>
			
			
			<Anchor>//api/name/presentingViewController</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/presentingViewController</TokenIdentifier>
			<Abstract type="html">The view controller that will present this view.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, weak) UIViewController *presentingViewController</Declaration>
			
			
			<Anchor>//api/name/presentingViewController</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PFLogInView/presentingViewController</TokenIdentifier>
			<Abstract type="html">The view controller that will present this view.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, weak) UIViewController *presentingViewController</Declaration>
			
			
			<Anchor>//api/name/presentingViewController</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/setLogo:</TokenIdentifier>
			<Abstract type="html">The logo. By default, it is the Parse logo.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong) UIView *logo</Declaration>
			
			
			<Anchor>//api/name/logo</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/logo</TokenIdentifier>
			<Abstract type="html">The logo. By default, it is the Parse logo.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong) UIView *logo</Declaration>
			
			
			<Anchor>//api/name/logo</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PFLogInView/logo</TokenIdentifier>
			<Abstract type="html">The logo. By default, it is the Parse logo.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong) UIView *logo</Declaration>
			
			
			<Anchor>//api/name/logo</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/setEmailAsUsername:</TokenIdentifier>
			<Abstract type="html">If email should be used to log in, instead of username</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL emailAsUsername</Declaration>
			
			
			<Anchor>//api/name/emailAsUsername</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/emailAsUsername</TokenIdentifier>
			<Abstract type="html">If email should be used to log in, instead of username</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL emailAsUsername</Declaration>
			
			
			<Anchor>//api/name/emailAsUsername</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PFLogInView/emailAsUsername</TokenIdentifier>
			<Abstract type="html">If email should be used to log in, instead of username</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL emailAsUsername</Declaration>
			
			
			<Anchor>//api/name/emailAsUsername</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/setFields:</TokenIdentifier>
			<Abstract type="html">The bitmask which specifies the enabled log in elements in the view.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) PFLogInFields fields</Declaration>
			
			
			<Anchor>//api/name/fields</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/fields</TokenIdentifier>
			<Abstract type="html">The bitmask which specifies the enabled log in elements in the view.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) PFLogInFields fields</Declaration>
			
			
			<Anchor>//api/name/fields</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PFLogInView/fields</TokenIdentifier>
			<Abstract type="html">The bitmask which specifies the enabled log in elements in the view.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) PFLogInFields fields</Declaration>
			
			
			<Anchor>//api/name/fields</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/setUsernameField:</TokenIdentifier>
			<Abstract type="html">The username text field. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) PFTextField *usernameField</Declaration>
			
			
			<Anchor>//api/name/usernameField</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/usernameField</TokenIdentifier>
			<Abstract type="html">The username text field. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) PFTextField *usernameField</Declaration>
			
			
			<Anchor>//api/name/usernameField</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PFLogInView/usernameField</TokenIdentifier>
			<Abstract type="html">The username text field. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) PFTextField *usernameField</Declaration>
			
			
			<Anchor>//api/name/usernameField</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/setPasswordField:</TokenIdentifier>
			<Abstract type="html">The password text field. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) PFTextField *passwordField</Declaration>
			
			
			<Anchor>//api/name/passwordField</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/passwordField</TokenIdentifier>
			<Abstract type="html">The password text field. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) PFTextField *passwordField</Declaration>
			
			
			<Anchor>//api/name/passwordField</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PFLogInView/passwordField</TokenIdentifier>
			<Abstract type="html">The password text field. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) PFTextField *passwordField</Declaration>
			
			
			<Anchor>//api/name/passwordField</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/setPasswordForgottenButton:</TokenIdentifier>
			<Abstract type="html">The password forgotten button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *passwordForgottenButton</Declaration>
			
			
			<Anchor>//api/name/passwordForgottenButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/passwordForgottenButton</TokenIdentifier>
			<Abstract type="html">The password forgotten button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *passwordForgottenButton</Declaration>
			
			
			<Anchor>//api/name/passwordForgottenButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PFLogInView/passwordForgottenButton</TokenIdentifier>
			<Abstract type="html">The password forgotten button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *passwordForgottenButton</Declaration>
			
			
			<Anchor>//api/name/passwordForgottenButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/setLogInButton:</TokenIdentifier>
			<Abstract type="html">The log in button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *logInButton</Declaration>
			
			
			<Anchor>//api/name/logInButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/logInButton</TokenIdentifier>
			<Abstract type="html">The log in button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *logInButton</Declaration>
			
			
			<Anchor>//api/name/logInButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PFLogInView/logInButton</TokenIdentifier>
			<Abstract type="html">The log in button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *logInButton</Declaration>
			
			
			<Anchor>//api/name/logInButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/setFacebookButton:</TokenIdentifier>
			<Abstract type="html">The Facebook button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *facebookButton</Declaration>
			
			
			<Anchor>//api/name/facebookButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/facebookButton</TokenIdentifier>
			<Abstract type="html">The Facebook button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *facebookButton</Declaration>
			
			
			<Anchor>//api/name/facebookButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PFLogInView/facebookButton</TokenIdentifier>
			<Abstract type="html">The Facebook button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *facebookButton</Declaration>
			
			
			<Anchor>//api/name/facebookButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/setTwitterButton:</TokenIdentifier>
			<Abstract type="html">The Twitter button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *twitterButton</Declaration>
			
			
			<Anchor>//api/name/twitterButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/twitterButton</TokenIdentifier>
			<Abstract type="html">The Twitter button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *twitterButton</Declaration>
			
			
			<Anchor>//api/name/twitterButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PFLogInView/twitterButton</TokenIdentifier>
			<Abstract type="html">The Twitter button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *twitterButton</Declaration>
			
			
			<Anchor>//api/name/twitterButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/setSignUpButton:</TokenIdentifier>
			<Abstract type="html">The sign up button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *signUpButton</Declaration>
			
			
			<Anchor>//api/name/signUpButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/signUpButton</TokenIdentifier>
			<Abstract type="html">The sign up button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *signUpButton</Declaration>
			
			
			<Anchor>//api/name/signUpButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PFLogInView/signUpButton</TokenIdentifier>
			<Abstract type="html">The sign up button. It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *signUpButton</Declaration>
			
			
			<Anchor>//api/name/signUpButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/setDismissButton:</TokenIdentifier>
			<Abstract type="html">It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *dismissButton</Declaration>
			
			
			<Anchor>//api/name/dismissButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/dismissButton</TokenIdentifier>
			<Abstract type="html">It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *dismissButton</Declaration>
			
			
			<Anchor>//api/name/dismissButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PFLogInView/dismissButton</TokenIdentifier>
			<Abstract type="html">It is nil if the element is not enabled.</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UIButton *dismissButton</Declaration>
			
			
			<Anchor>//api/name/dismissButton</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/setExternalLogInLabel:</TokenIdentifier>
			<Abstract type="html">The facebook/twitter login label. (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; This property is deprecated and will always be nil.&lt;/span&gt;)</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UILabel *externalLogInLabel</Declaration>
			
			
			<Anchor>//api/name/externalLogInLabel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/externalLogInLabel</TokenIdentifier>
			<Abstract type="html">The facebook/twitter login label. (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; This property is deprecated and will always be nil.&lt;/span&gt;)</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UILabel *externalLogInLabel</Declaration>
			
			
			<Anchor>//api/name/externalLogInLabel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PFLogInView/externalLogInLabel</TokenIdentifier>
			<Abstract type="html">The facebook/twitter login label. (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; This property is deprecated and will always be nil.&lt;/span&gt;)</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UILabel *externalLogInLabel</Declaration>
			
			
			<Anchor>//api/name/externalLogInLabel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/setSignUpLabel:</TokenIdentifier>
			<Abstract type="html">The sign up label. (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; This property is deprecated and will always be nil.&lt;/span&gt;)</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UILabel *signUpLabel</Declaration>
			
			
			<Anchor>//api/name/signUpLabel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFLogInView/signUpLabel</TokenIdentifier>
			<Abstract type="html">The sign up label. (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; This property is deprecated and will always be nil.&lt;/span&gt;)</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UILabel *signUpLabel</Declaration>
			
			
			<Anchor>//api/name/signUpLabel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PFLogInView/signUpLabel</TokenIdentifier>
			<Abstract type="html">The sign up label. (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; This property is deprecated and will always be nil.&lt;/span&gt;)</Abstract>
			<DeclaredIn>PFLogInView.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong, readonly) UILabel *signUpLabel</Declaration>
			
			
			<Anchor>//api/name/signUpLabel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
        
	</File>
</Tokens>